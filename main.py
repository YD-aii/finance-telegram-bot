from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ConversationHandler
import database as db
from config import BOT_TOKEN

from database import is_user_registered, register_user
from config import AUTH_CODE
from config import ADMIN_IDS
from database import get_all_users
from telegram.ext import ContextTypes
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from telegram import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –∏ –≤–≤–æ–¥–∞ –¥–∞–Ω–Ω—ã—Ö
CHOOSING_MONTH, ADDING_INCOME_NAME, ADDING_INCOME_AMOUNT = range(3)
ADDING_EXPENSE_NAME, ADDING_EXPENSE_AMOUNT = range(3, 5)

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–µ—Å—è—Ü—ã
MONTHS = ["–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
          "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"]


async def open_app(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://your-deployed-url.com"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=reply_markup)

async def open_app(update: Update, context):
    keyboard = [
        [InlineKeyboardButton("–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url="https://yourdomain.com"))]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("üì± –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=reply_markup)


async def universal_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or ""
    first_name = user.first_name or ""

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if not db.is_user_registered(user_id):
        if context.user_data.get("awaiting_code"):
            if update.message.text == AUTH_CODE:
                db.register_user(user_id, username, first_name)
                context.user_data["awaiting_code"] = False
                await update.message.reply_text("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞!")
                await start(update, context)
            else:
                await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        else:
            context.user_data["awaiting_code"] = True
            await update.message.reply_text("üîê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –¥–æ—Å—Ç—É–ø–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
        return

    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∞–¥—Ä–µ—Å–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—É, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å
    await update.message.reply_text("ü§ñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")




# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
def get_main_menu():
    keyboard = [
        ["–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥", "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"],
        ["–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"],
        ["–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–æ—Ö–æ–¥—ã", "–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã"],
        ["–°–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü"]
    ]
    return ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context):
    keyboard = [["–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü"]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –±–æ—Ç!", reply_markup=reply_markup)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
async def choose_month(update: Update, context):
    keyboard = [[month] for month in MONTHS]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True)
    await update.message.reply_text("üóì–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:", reply_markup=reply_markup)
    return CHOOSING_MONTH


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞
async def handle_month_choice(update: Update, context):
    month = update.message.text
    if month not in MONTHS:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return CHOOSING_MONTH

    context.user_data["month"] = month  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ—Å—è—Ü
    await update.message.reply_text(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –º–µ—Å—è—Ü: {month}. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ñ–∏–Ω–∞–Ω—Å—ã.",
                                    reply_markup=get_main_menu())
    return ConversationHandler.END


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ—Ö–æ–¥–∞
async def add_income(update: Update, context):
    if "month" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–æ—Ö–æ–¥–∞:")
    return ADDING_INCOME_NAME


# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–æ—Ö–æ–¥–∞
async def handle_income_name(update: Update, context):
    context.user_data["income_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–æ—Ö–æ–¥–∞:")
    return ADDING_INCOME_AMOUNT


# –í–≤–æ–¥ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞
async def handle_income_amount(update: Update, context):
    user_id = update.message.from_user.id
    month = context.user_data["month"]
    income_name = context.user_data["income_name"]
    income_amount = float(update.message.text)

    db.add_income(user_id, month, income_name, income_amount)

    await update.message.reply_text(f"‚úÖ –î–æ—Ö–æ–¥ '{income_name}' ({income_amount}‚ÇΩ) –¥–æ–±–∞–≤–ª–µ–Ω –≤ {month}!",
                                    reply_markup=get_main_menu())
    return ConversationHandler.END


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞
async def add_expense(update: Update, context):
    if "month" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.")
        return ConversationHandler.END
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:")
    return ADDING_EXPENSE_NAME


# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
async def handle_expense_name(update: Update, context):
    context.user_data["expense_name"] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:")
    return ADDING_EXPENSE_AMOUNT


# –í–≤–æ–¥ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞
async def handle_expense_amount(update: Update, context):
    user_id = update.message.from_user.id
    month = context.user_data["month"]
    expense_name = context.user_data["expense_name"]
    expense_amount = float(update.message.text)

    db.add_expense(user_id, month, expense_name, expense_amount)

    await update.message.reply_text(f"‚úÖ –†–∞—Å—Ö–æ–¥ '{expense_name}' ({expense_amount}‚ÇΩ) –¥–æ–±–∞–≤–ª–µ–Ω –≤ {month}!",
                                    reply_markup=get_main_menu())
    return ConversationHandler.END


# –ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –¥–æ—Ö–æ–¥–æ–≤
async def show_table(update: Update, context):
    if "month" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.")
        return

    user_id = update.message.from_user.id
    month = context.user_data["month"]

    incomes = db.get_incomes(user_id, month)
    expenses = db.get_expenses(user_id, month)

    response = f"üìä –§–∏–Ω–∞–Ω—Å—ã –∑–∞ {month}:\n\n"
    response += "–î–æ—Ö–æ–¥—ã:\n" if incomes else "–î–æ—Ö–æ–¥–æ–≤ –Ω–µ—Ç.\n"
    for id, name, amount in incomes:
        response += f"‚Ä¢ {name}: {amount}‚ÇΩ\n"

    response += "\n–†–∞—Å—Ö–æ–¥—ã:\n" if expenses else "\n–†–∞—Å—Ö–æ–¥–æ–≤ –Ω–µ—Ç.\n"
    for id, name, amount in expenses:
        response += f"‚Ä¢ {name}: {amount}‚ÇΩ\n"

    balance = db.get_balance(user_id, month)
    response += f"\nüí∞ –ò—Ç–æ–≥–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: {balance}‚ÇΩ"

    await update.message.reply_text(response, reply_markup=get_main_menu())


# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –¥–æ—Ö–æ–¥–æ–≤
async def delete_all_incomes(update: Update, context):
    if "month" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.")
        return

    user_id = update.message.from_user.id
    month = context.user_data["month"]

    db.delete_all_incomes(user_id, month)
    await update.message.reply_text(f"‚ùå –í—Å–µ –¥–æ—Ö–æ–¥—ã –∑–∞ {month} —É–¥–∞–ª–µ–Ω—ã!", reply_markup=get_main_menu())


# –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤
async def delete_all_expenses(update: Update, context):
    if "month" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü.")
        return

    user_id = update.message.from_user.id
    month = context.user_data["month"]

    db.delete_all_expenses(user_id, month)
    await update.message.reply_text(f"‚ùå –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã –∑–∞ {month} —É–¥–∞–ª–µ–Ω—ã!", reply_markup=get_main_menu())


# –°–º–µ–Ω–∞ –º–µ—Å—è—Ü–∞
async def change_month(update: Update, context):
    return await choose_month(update, context)
async def admin_panel(update: Update, context):
    user_id = update.effective_user.id
    if user_id not in ADMIN_IDS:
        await update.message.reply_text("üö´ –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return

    users = get_all_users()
    if not users:
        await update.message.reply_text("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
        return

    text = "üë• –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n\n"
    for uid, username, first_name in users:
        name = first_name or "–ë–µ–∑ –∏–º–µ–Ω–∏"
        login = f"@{username}" if username else "(–Ω–µ—Ç username)"
        text += f"‚Ä¢ {name} ‚Äî {login} (ID: {uid})\n"

    await update.message.reply_text(text)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = Application.builder().token(BOT_TOKEN).build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞
    month_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text(["–í—ã–±—Ä–∞—Ç—å –º–µ—Å—è—Ü", "–°–º–µ–Ω–∏—Ç—å –º–µ—Å—è—Ü"]), choose_month)],
        states={CHOOSING_MONTH: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_month_choice)]},
        fallbacks=[]
    )

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
    income_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text("–î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"), add_income)],
        states={ADDING_INCOME_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_income_name)],
                ADDING_INCOME_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_income_amount)]},
        fallbacks=[]
    )

    expense_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Text("–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"), add_expense)],
        states={ADDING_EXPENSE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_expense_name)],
                ADDING_EXPENSE_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_expense_amount)]},
        fallbacks=[]
    )

    application.add_handler(month_handler)
    application.add_handler(income_handler)
    application.add_handler(expense_handler)
    application.add_handler(MessageHandler(filters.Text("–ü–æ–∫–∞–∑–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É"), show_table))
    application.add_handler(MessageHandler(filters.Text("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ –¥–æ—Ö–æ–¥—ã"), delete_all_incomes))
    application.add_handler(MessageHandler(filters.Text("–£–¥–∞–ª–∏—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã"), delete_all_expenses))
    application.add_handler(CommandHandler("admin", admin_panel))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, universal_handler))
    application.add_handler(CommandHandler("app", open_app))
    application.add_handler(CommandHandler("app", open_app))

    application.run_polling()


if __name__ == "__main__":
    main()
